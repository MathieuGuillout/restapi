{
  "name": "barefoot",
  "version": "0.0.12",
  "description": "barefoot is a utility-belt library for Node for asynchronous functions manipulation",
  "main": "barefoot.litcoffee",
  "repository": {
    "type": "git",
    "url": "git@github.com:MathieuGuillout/Barefoot.git"
  },
  "author": {
    "name": "matTtam"
  },
  "license": "BSD",
  "dependencies": {
    "lateral": "~2.3.0",
    "underscore": "~1.4.4"
  },
  "readme": "Barefoot\n========\n\nBarefoot is a utility-belt library for Node for asynchronous functions manipulation\n\nTo install it\n\n`npm install barefoot`\n\nTo use it\n\n`bf = require 'barefoot'`\n\n   \nModule dependencies\n-------------------\n\n```coffeescript\nlateral = require 'lateral'\n```\n\n\nLet's get started\n------------------\n\n\n**toDictionary** \n\nTransform an array of object into a dictionary based on the property passed as a second param\n```coffeescript\ntoDictionary = (array, prop) ->\n  dictionary = {}\n  array.forEach (elt) -> \n    dictionary[elt[prop]] = elt if elt? and elt[prop]?\n  return dictionary\n```\n\n\n**has**\n\nProvides a function which test if parameters object has certain properties\n```coffeescript\nhas = (parameters) ->\n  (params, done) ->\n    ok = true\n    ok = (ok and params? and params[par]?) for par in parameters\n    done (if ok then null else new Error(\"Missing Parameters\")), params\n```\n\n**amap**\n\nAsynchronous map \nUse the awesome **lateral** module to do the job\n```coffeescript\namap = (func, nbProcesses = 1) ->\n  (array, done) ->\n    results = []\n    errors = null\n    unit = lateral.create (complete, item) ->\n      func item, (err, res) ->\n        if err?\n          errors ?= []\n          errors.push(err)\n          results.push null\n        else\n          results.push res\n        complete()\n    , nbProcesses\n\n    unit.add(array).when () ->\n      done errors, results\n```\n**chain**\n\nChain aynschronous methods with signature (params, done) -> done(err, result)\nStop if one of the method has an error in the callback\n```coffeescript\nchain = (funcs) -> \n  (params, done, err) ->\n    if funcs.length == 0\n      done err, params\n    else\n      funcs[0] params, (err, res) =>\n        if err?\n          done err, res\n        else\n          methods.chain(funcs.slice(1, funcs.length))(res, done, err)\n```\n\n**avoid**\n\nWrap a void returning function to make it callable in a chain\n```coffeescript\navoid = (func) ->\n  (params, done) ->\n    func(params)\n    done null, params \n```\n\n**parallel**\n\nExecute asynchronous functions which take same inputs \n```coffeescript\nparallel = (funcs) ->\n  (params, done) -> \n    \n    i = 0\n    errors = []\n    results = []\n    tempDone = (err, result) ->\n      i++\n      errors.push(err) if err?\n      results.push result\n      if i == funcs.length\n        error = if errors.length > 0  then errors else null\n        done error, results\n\n    funcs.forEach (func) ->\n      func params, tempDone\n```\n\n**getRequestParams**\n```coffeescript\ngetRequestParams = (req) -> \n  params = {}\n  for field in [\"body\", \"query\", \"params\"]\n    if req[field]?\n      params = _.extend params, req[field]\n  params.user = req.user if req.user?\n  params\n```\n\n**webService**\n```coffeescript\nwebService = (method) ->\n  (req, res) ->\n    method getRequestParams(req), (err, data) ->\n      res.send data\n```\n\n**webPage**\n```coffeescript\nwebPage = (template, method) ->\n  (req, res) ->\n    if not method? and template?\n      res.render template, getRequestParams(req)\n    else\n      method getRequestParams(req), (err, data) ->\n        if err?\n          res.send 500\n        else\n          data = {} if not data?\n          data.user = req.user if req.user? and not data.user?\n          res.render template, data\n```\n\nExport public methods\n---------------------\n```coffeescript\nmodule.exports =\n  toDictionary : toDictionary\n  has          : has\n  amap         : amap\n  chain        : chain\n  avoid        : avoid\n  parallel     : parallel\n  webService   : webService\n  webPage      : webPage\n```\n",
  "_id": "barefoot@0.0.12",
  "_from": "barefoot"
}
